use teloxide::prelude::*;
use teloxide::types::Message;
use std::sync::Arc;
use std::sync::Mutex;
use std::collections::HashMap;

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
fn generate_random_question() -> (String, String) {
    let questions = vec![
        ("–ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?", "–ú–æ—Å–∫–≤–∞"),
        ("–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?", "4"),
        ("–ö–∞–∫–æ–π —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –æ–∫–µ–∞–Ω?", "–¢–∏—Ö–∏–π"),
        ("–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?", "8"),
        ("–ö–∞–∫–æ–µ —Å–∞–º–æ–µ –±—ã—Å—Ç—Ä–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?", "–ì–µ–ø–∞—Ä–¥"),
        ("–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç 'hello' –ø–æ-—Ä—É—Å—Å–∫–∏?", "–ü—Ä–∏–≤–µ—Ç"),
        ("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –≥–æ–¥—É?", "365"),
        ("–ö–∞–∫–∞—è —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –≤ –º–∏—Ä–µ?", "–ù–∏–ª"),
        ("–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 5*5?", "25"),
        ("–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –°–æ–ª–Ω—Ü—É?", "–ú–µ—Ä–∫—É—Ä–∏–π"),
    ];
    
    // –ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    let index = std::time::SystemTime::now()
        .duration_since(std::time::UNIX_EPOCH)
        .unwrap()
        .as_secs() % questions.len() as u64;
    
    let (q, a) = questions[index as usize];
    (q.to_string(), a.to_string())
}

#[tokio::main]
async fn main() {
    const TOKEN: &str = "8245910738:AAHjwVmJXJ1qh3c-B_4PHhbZnG49zDdbZkQ";
    let bot = Bot::new(TOKEN);
    
    pretty_env_logger::init();
    log::info!("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...");
    
    // –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (chat_id)
    let subscribers: Arc<Mutex<Vec<ChatId>>> = Arc::new(Mutex::new(Vec::new()));
    
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–≤–µ—Ç–æ–≤: chat_id -> –æ—Ç–≤–µ—Ç
    let answers: Arc<Mutex<HashMap<ChatId, String>>> = Arc::new(Mutex::new(HashMap::new()));
    let winner: Arc<Mutex<Option<String>>> = Arc::new(Mutex::new(None));
    // –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    let current_question: Arc<Mutex<Option<(String, String)>>> = Arc::new(Mutex::new(None));
    
    let handler = move |bot: Bot, msg: Message| {
        let subscribers = subscribers.clone();
        let answers = answers.clone();
        let winner = winner.clone();
        let current_question = current_question.clone();
        
        async move {
            if let Some(text) = msg.text() {
                if text.starts_with("/start") {
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                    let chat_id = msg.chat.id;
                    {
                        let mut subs = subscribers.lock().unwrap();
                        if !subs.contains(&chat_id) {
                            subs.push(chat_id);
                            log::info!("–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {:?}", chat_id);
                        }
                    }
                    bot.send_message(chat_id, "–ø—Ä–∏–≤–µ—Ç –ø–∏—à–∏ /quiz").await?;
                } else if text.starts_with("/quiz") {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                    let (question, correct_answer) = generate_random_question();
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç
                    {
                        let mut q = current_question.lock().unwrap();
                        *q = Some((question.clone(), correct_answer.clone()));
                    }
                    
                    // –ó–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å –≤—Å–µ–º
                    let subs_copy = {
                        let subs = subscribers.lock().unwrap();
                        subs.clone()
                    };
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã
                    {
                        let mut ans = answers.lock().unwrap();
                        ans.clear();
                    }
                    {
                        let mut w = winner.lock().unwrap();
                        *w = None;
                    }
                    
                    for chat_id in subs_copy {
                        if let Err(e) = bot.send_message(chat_id, &format!("‚ùì {}", question)).await {
                            log::error!("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {:?}: {:?}", chat_id, e);
                        }
                    }
                    bot.send_message(msg.chat.id, format!("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {}", correct_answer)).await?;
                } else if text.starts_with("/broadcast") {
                    // –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                    let subs_copy = {
                        let subs = subscribers.lock().unwrap();
                        subs.clone()
                    };
                    
                    let subscribers_count = subs_copy.len();
                    let message = text.trim_start_matches("/broadcast").trim();
                    let message = if message.is_empty() { "–û–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" } else { message };
                    
                    for chat_id in subs_copy {
                        if let Err(e) = bot.send_message(chat_id, message).await {
                            log::error!("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {:?}: {:?}", chat_id, e);
                        }
                    }
                    bot.send_message(msg.chat.id, format!("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", subscribers_count)).await?;
                } else {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
                    let chat_id = msg.chat.id;
                    let user_answer = text.trim();
                    
                    let username = msg.from()
                        .and_then(|u| u.username.clone().or_else(|| Some(u.first_name.clone())))
                        .unwrap_or_else(|| format!("Unknown_{:?}", chat_id));
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∏ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
                    let (already_winner, is_correct) = {
                        let w = winner.lock().unwrap();
                        let q = current_question.lock().unwrap();
                        let has_winner = w.is_some();
                        let correct = if let Some((_, correct)) = q.as_ref() {
                            user_answer.eq_ignore_ascii_case(&correct.to_string())
                        } else {
                            false
                        };
                        (has_winner, correct)
                    };
                    
                    if !already_winner {
                        if is_correct {
                            // –ù–∞–π–¥–µ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å!
                            {
                                let mut w = winner.lock().unwrap();
                                *w = Some(username.clone());
                            }
                            log::info!("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {}", username);
                            
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
                            let subs_copy = {
                                let subs = subscribers.lock().unwrap();
                                subs.clone()
                            };
                            
                            let message = format!("üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {}! –ë—ã—Å—Ç—Ä–µ–µ –≤—Å–µ—Ö –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!", username);
                            for cid in subs_copy {
                                if let Err(e) = bot.send_message(cid, &message).await {
                                    log::error!("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {:?}: {:?}", cid, e);
                                }
                            }
                            
                            bot.send_message(chat_id, "‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—å!").await?;
                        } else {
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
                            {
                                let mut ans = answers.lock().unwrap();
                                ans.insert(chat_id, user_answer.to_string());
                            }
                            bot.send_message(chat_id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë!").await?;
                        }
                    } else {
                        bot.send_message(chat_id, "‚è∞ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —É–∂–µ –Ω–∞–π–¥–µ–Ω!").await?;
                    }
                }
            }
            Ok(())
        }
    };
    
    teloxide::repl(bot, handler).await;
}


